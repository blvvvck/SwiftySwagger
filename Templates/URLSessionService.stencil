import Foundation

protocol {{tag}}ServiceProtocol {
    {% for model in models %}
        {% if model.parameters.count == 0 %}
        func {{model.name}}(completion: @escaping (Swift.Result<{{model.responseStringValueName}}, Error>) -> Void)
        {% else %}
        func {{model.name}}({{model.rawParameters}}, completion: @escaping (Swift.Result<{{model.responseStringValueName}}, Error>) -> Void)
        {% endif %}
    {% endfor %}
}

struct {{tag}}Service: {{tag}}ServiceProtocol  {
    let router = Router<{{tag}}API>()

    {% for model in models %} 
    {% if model.parameters.count == 0 %}

    func {{model.name}}(completion: @escaping (Swift.Result<{{model.responseStringValueName}}, Error>) -> Void) {
        router.request(.{{model.name}}) { data, response, error in
            if error != nil {
                completion(.failure(error!))
            }

            if let response = response as? HTTPURLResponse {
                let result = self.handleNetworkResponse(response)
                switch result {
                case .success:
                    {% if model.responseStringValueName == "Void" %}
                        completion(.success(()))
                    {% else %}
                    guard let responseData = data else {
                        completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: NetworkResponse.noData.rawValue])))
                        return
                    }

                    do {
                        let jsonData = try JSONSerialization.jsonObject(with: responseData, options: .mutableContainers)
                        let apiResponse = try JSONDecoder().decode({{model.responseStringValueName}}.self, from: responseData)
                        completion(.success(apiResponse))
                    } catch {
                        completion(.failure(NSError(domain: "", code: -2, userInfo: [NSLocalizedDescriptionKey : NetworkResponse.unableToDecode.rawValue])))
                    }
                    {% endif %}
                case let .failure(networkFailureError):
                    completion(.failure(NSError(domain: "", code: -3, userInfo: [NSLocalizedDescriptionKey : networkFailureError])))
                }
            }

        }
    }

    {% else %}
    func {{model.name}}({{model.rawParameters}}, completion: @escaping (Swift.Result<{{model.responseStringValueName}}, Error>) -> Void) {
        router.request(.{{model.name}}({{model.rawParametersToCall}})) { data, response, error in
            if error != nil {
                completion(.failure(error!))
            }

            if let response = response as? HTTPURLResponse {
                let result = self.handleNetworkResponse(response)
                switch result {
                case .success:
                    {% if model.responseStringValueName == "Void" %}
                        completion(.success(()))
                    {% else %}
                    guard let responseData = data else {
                        completion(.failure(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: NetworkResponse.noData.rawValue])))
                        return
                    }

                    do {
                        let jsonData = try JSONSerialization.jsonObject(with: responseData, options: .mutableContainers)
                        let apiResponse = try JSONDecoder().decode({{model.responseStringValueName}}.self, from: responseData)
                        completion(.success(apiResponse))
                    } catch {
                        completion(.failure(NSError(domain: "", code: -2, userInfo: [NSLocalizedDescriptionKey : NetworkResponse.unableToDecode.rawValue])))
                    }
                    {% endif %}
                case let .failure(networkFailureError):
                    completion(.failure(NSError(domain: "", code: -3, userInfo: [NSLocalizedDescriptionKey : networkFailureError])))
                }
            }

        }
    }
    {% endif %}
    {% endfor %}

    fileprivate func handleNetworkResponse(_ response: HTTPURLResponse) -> Result<String>{
        switch response.statusCode {
        case 200...299: return .success
        case 401...500: return .failure(NetworkResponse.authenticationError.rawValue)
        case 501...599: return .failure(NetworkResponse.badRequest.rawValue)
        case 600: return .failure(NetworkResponse.outdated.rawValue)
        default: return .failure(NetworkResponse.failed.rawValue)
        }
    }
} 